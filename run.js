const fetch = require("node-fetch");
const WebSocketClient = require("websocket").client;
const Nimiq = require("@nimiq/core");

const SEEDS = [
  "wss://seed.nimiqpool.com:22001",
  "wss://seed.nimiq.by:8443",
  "wss://urp.best:8443",
  "wss://nimiq.icemining.ca:8443",
  "wss://nimiq.mopsus.com",
  "wss://hk1.seed.nimpool.io:443",
  "wss://node.nimiq.watch:8080",
  "wss://seed-1.nimiq.com",
  "wss://seed-2.nimiq.com",
  "wss://seed-3.nimiq.com",
  "wss://seed-4.nimiq-network.com",
  "wss://seed-5.nimiq-network.com",
  "wss://seed-6.nimiq-network.com",
  "wss://seed-7.nimiq.network",
  "wss://seed-8.nimiq.network",
  "wss://seed-9.nimiq.network",
  "wss://seed-10.nimiq.network",
  "wss://seed-11.nimiq.network",
  "wss://seed-12.nimiq.network",
  "wss://seed-13.nimiq-network.com",
  "wss://seed-14.nimiq-network.com",
  "wss://seed-15.nimiq-network.com",
  "wss://seed-16.nimiq.com",
  "wss://seed-17.nimiq.com",
  "wss://seed-18.nimiq.com",
  "wss://seed-19.nimiq.com",
  "wss://seed-20.nimiq.com",
];

async function rpcCall(id, params = []) {
  const req = await fetch("http://localhost:8648", {
    method: "POST",
    body: JSON.stringify({
      jsonrpc: "2.0",
      method: id,
      params,
      id: 1,
    }),
  });
  const json = await req.json();
  return json.result;
}

function serialSeeds(seeds) {
  return BufferUtils.fromAscii(seeds).join("\n");
}

async function main() {
  let arr = await rpcCall("peerList");
  arr = arr.map(a => a.address);
  arr = arr.filter(line => !SEEDS.map(seed => line.startsWith(seed)).includes(true));
  arr = arr.filter(line => line.startsWith("ws"));
  //arr = arr.filter(line => !line.includes("sunnimiq")); // multiple nodes
  arr = arr.map(line => line.split("/").slice(0, 3).join("/") + "/");
  arr = [...new Set(arr)];
  console.error(arr);
  const kp = Nimiq.KeyPair.fromHex(process.env.NIMIQ_KP);
  console.log(`# Generated ${(new Date).toUTCString()}
# One seed address per line.
# Lines starting with # and blank lines are ignored.
# Seed address formats:
#    wss://<hostname>:<port>/<public_key>
#    ws://<hostname|ip>:<port>/<public_key>

# This is the node the list is generated from:
${process.env.NODE_ADDR}

# These seeds are automatically generated by a script,
# based on the nodes Smitop's full node knows about.`);
  let addedSeeds = [process.env.NODE_ADDR];
  arr.forEach(seed => {
    let client = new WebSocketClient();
    client.on("connect", function(connection) {
      console.log(seed);
      addedSeeds.push(seed);
      connection.on("message", function(message) {
        //if (message.type === "utf8") {
          console.error(seed + "Received: '" + message + "'");
        //}
      });
    });
    client.on("connectError", function(connection) {
      console.error("Connect error: " + seed);
    });
    client.connect(seed);
  });
  //console.log(Buffer.from(Nimiq.Signature._signatureCreate(kp.privateKey._obj, kp.publicKey._obj, "test")).toString("hex"));
  setTimeout(() => {
    let whatToSign = addedSeeds.join("\n");
    whatToSign = Uint8Array.from(Array.from(whatToSign).map(l => l.charCodeAt(0)));
    console.log(`
# The last line is the hex-encoded signature.
# It is the result of signing all seeds listed above, joined by newlines.
# It was signed using Nimiq.Signature._signatureCreate
# My public key is ${kp.publicKey.toHex()}.`);
    console.log(Buffer.from(Nimiq.Signature._signatureCreate(kp.privateKey._obj, kp.publicKey._obj, whatToSign)).toString("hex"));
    process.exit(0);
  }, 10000);
}
main();
